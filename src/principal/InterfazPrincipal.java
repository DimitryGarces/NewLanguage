package principal;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Diego
 */
public class InterfazPrincipal extends javax.swing.JFrame {

    int[] vecSal;
    NumLinecita numlinea;
    Lexico lexInv = new Lexico();
    Renglon[] codigoFuente;

    String[] tablaIdenFilas;
    ArrayList<String[]> tablaIdenCol = new ArrayList<>();
    ArrayList<String[]> tablaIdenFunMet = new ArrayList<>();
    ArrayList<String[]> tablaIdenParam = new ArrayList<>();
    ArrayList<int[]> rangoFunMet = new ArrayList<>();
    String programaEjecutado = "";

    /**
     * Creates new form InterfazPrincipal
     */
    public InterfazPrincipal() {
        initComponents();
        numlinea = new NumLinecita(jTProgramaFuente);
        jScrollPane1.setRowHeaderView(numlinea);
        pnSintactico.setVisible(false);
        pnSemantico.setVisible(false);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnContenedor = new javax.swing.JPanel();
        pnCarga1 = new javax.swing.JPanel();
        lbCargar = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnGuardar = new javax.swing.JPanel();
        lbGuardar = new javax.swing.JLabel();
        pnSintactico = new javax.swing.JPanel();
        lbSintactico = new javax.swing.JLabel();
        pnSemantico = new javax.swing.JPanel();
        lbSemantico = new javax.swing.JLabel();
        pnOptimizacion = new javax.swing.JPanel();
        lbOptimizacion = new javax.swing.JLabel();
        pnIntermedio = new javax.swing.JPanel();
        lbIntermedio = new javax.swing.JLabel();
        pnLexico = new javax.swing.JPanel();
        lbLexico = new javax.swing.JLabel();
        pnObjeto = new javax.swing.JPanel();
        lbObjeto = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTProgramaFuente = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTProgramaCompilado = new javax.swing.JTextArea();
        lbLex = new javax.swing.JLabel();
        lbSin = new javax.swing.JLabel();
        lbSem = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTProgramaSintactico = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTProgramaSemantico = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        erroresLexicos = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnContenedor.setBackground(new java.awt.Color(255, 255, 255));
        pnContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbCargar.setText("Cargar");
        lbCargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbCargarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnCarga1Layout = new javax.swing.GroupLayout(pnCarga1);
        pnCarga1.setLayout(pnCarga1Layout);
        pnCarga1Layout.setHorizontalGroup(
            pnCarga1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCarga1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnCarga1Layout.setVerticalGroup(
            pnCarga1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCarga1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnCarga1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 240, 70, 30));

        jLabel1.setText("Programa Fuente");
        pnContenedor.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        jLabel2.setText("Programa Compilado");
        pnContenedor.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        lbGuardar.setText("Guardar");
        lbGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGuardarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnGuardarLayout = new javax.swing.GroupLayout(pnGuardar);
        pnGuardar.setLayout(pnGuardarLayout);
        pnGuardarLayout.setHorizontalGroup(
            pnGuardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );
        pnGuardarLayout.setVerticalGroup(
            pnGuardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        pnContenedor.add(pnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 20, 70, 30));

        lbSintactico.setText("Sintactico");
        lbSintactico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSintacticoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnSintacticoLayout = new javax.swing.GroupLayout(pnSintactico);
        pnSintactico.setLayout(pnSintacticoLayout);
        pnSintacticoLayout.setHorizontalGroup(
            pnSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSintacticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnSintacticoLayout.setVerticalGroup(
            pnSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSintacticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnSintactico, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 450, 70, 30));

        lbSemantico.setText("Semantico");
        lbSemantico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSemanticoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnSemanticoLayout = new javax.swing.GroupLayout(pnSemantico);
        pnSemantico.setLayout(pnSemanticoLayout);
        pnSemanticoLayout.setHorizontalGroup(
            pnSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSemanticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSemantico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnSemanticoLayout.setVerticalGroup(
            pnSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSemanticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSemantico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnSemantico, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 440, 70, 30));

        lbOptimizacion.setText("Optimizacion");
        lbOptimizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbOptimizacionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnOptimizacionLayout = new javax.swing.GroupLayout(pnOptimizacion);
        pnOptimizacion.setLayout(pnOptimizacionLayout);
        pnOptimizacionLayout.setHorizontalGroup(
            pnOptimizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOptimizacionLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbOptimizacion))
        );
        pnOptimizacionLayout.setVerticalGroup(
            pnOptimizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOptimizacionLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbOptimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnOptimizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 140, 70, 30));

        lbIntermedio.setText("Intermedio");
        lbIntermedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbIntermedioMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnIntermedioLayout = new javax.swing.GroupLayout(pnIntermedio);
        pnIntermedio.setLayout(pnIntermedioLayout);
        pnIntermedioLayout.setHorizontalGroup(
            pnIntermedioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnIntermedioLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnIntermedioLayout.setVerticalGroup(
            pnIntermedioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnIntermedioLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnIntermedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 190, 70, 30));

        lbLexico.setText("Lexico");
        lbLexico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLexicoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnLexicoLayout = new javax.swing.GroupLayout(pnLexico);
        pnLexico.setLayout(pnLexicoLayout);
        pnLexicoLayout.setHorizontalGroup(
            pnLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLexicoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnLexicoLayout.setVerticalGroup(
            pnLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLexicoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnLexico, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 70, 30));

        lbObjeto.setText("Objeto");

        javax.swing.GroupLayout pnObjetoLayout = new javax.swing.GroupLayout(pnObjeto);
        pnObjeto.setLayout(pnObjetoLayout);
        pnObjetoLayout.setHorizontalGroup(
            pnObjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnObjetoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnObjetoLayout.setVerticalGroup(
            pnObjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnObjetoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnObjeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 80, 70, 30));

        jTProgramaFuente.setColumns(20);
        jTProgramaFuente.setRows(5);
        jTProgramaFuente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTProgramaFuenteKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTProgramaFuente);

        pnContenedor.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 490, 230));

        jTProgramaCompilado.setColumns(20);
        jTProgramaCompilado.setRows(5);
        jScrollPane2.setViewportView(jTProgramaCompilado);

        pnContenedor.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 240, 220));

        lbLex.setText("Lexico:");
        pnContenedor.add(lbLex, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, -1, -1));

        lbSin.setText("Sintactico:");
        pnContenedor.add(lbSin, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 280, -1, -1));

        lbSem.setText("Semantico:");
        pnContenedor.add(lbSem, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 280, -1, -1));

        jTProgramaSintactico.setColumns(20);
        jTProgramaSintactico.setRows(5);
        jScrollPane3.setViewportView(jTProgramaSintactico);

        pnContenedor.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, 310, 100));

        jTProgramaSemantico.setColumns(20);
        jTProgramaSemantico.setRows(5);
        jScrollPane4.setViewportView(jTProgramaSemantico);

        pnContenedor.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, 260, 100));
        pnContenedor.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, 110, 210));

        erroresLexicos.setColumns(20);
        erroresLexicos.setRows(5);
        jScrollPane5.setViewportView(erroresLexicos);

        pnContenedor.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 300, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lbLexicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLexicoMouseClicked
        pnSintactico.setVisible(false);
        pnSemantico.setVisible(false);
        lbSin.setText("Sintactico:");
        lbSem.setText("Semantico:");
        jTProgramaSintactico.setText("");
        jTProgramaSemantico.setText("");
        erroresLexicos.setText("");
        programaEjecutado = jTProgramaFuente.getText();
        String[] divisionRenglones = programaEjecutado.split("(?<=\\n)");
        String resultadoLexico = "";
        boolean b = true;
        codigoFuente = new Renglon[divisionRenglones.length + 1];
        Renglon renglon;
        for (int i = 0; i < divisionRenglones.length; i++) {
            StringTokenizer st = new StringTokenizer(divisionRenglones[i], "+-^*/()%#;=<>{}& \n\b\r\t\",:'", true);
            String texto = "";
            String cadena;
            while (st.hasMoreElements()) {
                cadena = st.nextToken();
                if (cadena.equals("=")) {
                    texto = texto + cadena;
                    if (st.hasMoreElements()) {
                        cadena = st.nextToken();
                        if (cadena.equals("=")) {
                            texto = texto + cadena + "\n";
                        } else if (!(cadena.equals(" ") || cadena.equals("\t"))) {
                            texto = texto + "\n" + cadena + "\n";
                        } else {
                            texto = texto + "\n";
                        }
                    }
                } else {
                    if (cadena.equals("<") || cadena.equals(">") || cadena.equals("!")) {
                        texto = texto + cadena;
                        if (st.hasMoreElements()) {
                            cadena = st.nextToken();
                            if (cadena.equals("=")) {
                                texto = texto + cadena + "\n";
                            } else if (!(cadena.equals(" ") || cadena.equals("\t"))) {
                                texto = texto + "\n" + cadena + "\n";

                            } else {
                                texto = texto + "\n";
                            }
                        }
                    } else {
                        if (cadena.equals("&")) {
                            texto = texto + cadena;
                            if (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("&")) {
                                    texto = texto + cadena + "\n";
                                } else {
                                    texto = texto + "\n" + cadena + "\n";
                                }
                            }
                        } else if (cadena.equals("\"")) {
                            texto = texto + cadena;
                            while (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("\"")) {
                                    texto = texto + cadena + "\n";
                                    break;
                                }
                                texto = texto + cadena;
                            }
                        } else if (cadena.equals(" ") || cadena.equals("\t")) {
                            cadena = "";
                        } else if (cadena.equals("'")) {
                            texto = texto + cadena;
                            while (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("'")) {
                                    texto = texto + cadena + "\n";
                                    break;
                                }
                                texto = texto + cadena;
                            }
                        } else {
                            texto = texto + cadena + "\n";
                        }
                    }
                }
            }
            StringTokenizer st2 = new StringTokenizer(texto, " \n\t\r");
            Lexico objLex2 = new Lexico();
            vecSal = new int[st2.countTokens()];
            int j = 0;
            while (st2.hasMoreElements()) {
                objLex2 = objLex2.Etiquetar(st2.nextToken());
                resultadoLexico = resultadoLexico + objLex2.lexema + "\t" + objLex2.nombre + "\n";
                vecSal[j] = objLex2.numero;
                switch (vecSal[j]) {
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                        b = false;
                        erroresLexicos.setText(erroresLexicos.getText() + "\n" + objLex2.nombre + " en linea: " + (i + 1));
                        break;
                }
                j++;

            }
            renglon = new Renglon(vecSal);
            codigoFuente[i] = renglon;

        }
//            vecSal[vecSal.length - 1] = 53;
        if (b) {
            lbLex.setText("Lexicamente: Correcto.");
            pnSintactico.setVisible(true);
        } else {
            lbLex.setText("Lexicamente: Incorrecto.");
            pnSintactico.setVisible(false);
        }
        jTProgramaCompilado.setText(resultadoLexico);
//        jTProgramaCompilado.setText(texto);
    }//GEN-LAST:event_lbLexicoMouseClicked

    private void lbSintacticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSintacticoMouseClicked
        pnSemantico.setVisible(false);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);
        jTProgramaSintactico.setText("");
        jTProgramaSemantico.setText("");
        String cadena = "";
        int[] pp
                = {
                    45
                };
        Renglon p = new Renglon(pp);
        codigoFuente[codigoFuente.length - 1] = p;
        int mg[][] = {{},
        {23, 188, 152, 151, 22, 51, 12},
        {151, 31, 51, 13},
        {},
        {152, 153},
        {},
        {156},
        {192},
        {185},
        {182},
        {154, 155},
        {},
        {156},
        {170},
        {168},
        {159},
        {171},
        {173},
        {174},
        {177},
        {31, 193, 52},
        {31, 52, 24},
        {158, 35},
        {166},
        {17},
        {18},
        {160, 23, 154, 22, 21, 161, 20, 3},
        {23, 154, 22, 4},
        {},
        {162, 166, 27, 166},
        {161, 26},
        {},
        {50},
        {51},
        {164},
        {53},
        {54},
        {165, 52},
        {189},
        {},
        {167, 163},
        {167, 163, 25},
        {},
        {31, 21, 169, 166, 20, 1},
        {169, 166, 34},
        {},
        {31, 21, 52, 20, 2},
        {23, 154, 22, 21, 172, 50, 30, 50, 20, 5},
        {50, 29},
        {},
        {23, 154, 22, 21, 161, 20, 6},
        {31, 21, 161, 20, 6, 23, 154, 22, 7},
        {31, 11, 154, 30, 176, 8},
        {53},
        {51},
        {50},
        {23, 178, 22, 21, 52, 20, 9},
        {178, 175},
        {179},
        {154, 30, 10},
        {},
        {52, 24},
        {180, 16},
        {23, 31, 52, 19, 154, 22, 21, 183, 20, 181},
        {184, 180},
        {183, 29},
        {},
        {23, 154, 22, 21, 186, 20, 51, 15},
        {187, 180},
        {186, 29},
        {},
        {23, 154, 22, 14},
        {21, 190, 20},
        {191, 52},
        {191, 52, 29},
        {},
        {31, 157, 52},
        {189},
        {157}
        };

        int mt[][] = new int[45][55];
        for (int i = 0; i < 45; i++) {
            for (int j = 0; j < 55; j++) {
                mt[i][j] = -1;
            }
        }
        mt[0][12] = 1;
        mt[1][13] = 2;
        mt[1][14] = 3;
        mt[1][15] = 3;
        mt[1][16] = 3;
        mt[1][24] = 3;
        mt[1][52] = 3;
        mt[2][14] = 5;
        mt[2][15] = 4;
        mt[2][16] = 4;
        mt[2][24] = 4;
        mt[2][52] = 4;
        mt[3][15] = 8;
        mt[3][16] = 9;
        mt[3][24] = 6;
        mt[3][31] = 7;
        mt[3][52] = 7;
        mt[4][1] = 10;
        mt[4][2] = 10;
        mt[4][3] = 10;
        mt[4][5] = 10;
        mt[4][6] = 10;
        mt[4][7] = 10;
        mt[4][9] = 10;
        mt[4][11] = 11;
        mt[4][19] = 11;
        mt[4][23] = 11;
        mt[4][24] = 10;
        mt[4][52] = 10;
        mt[5][1] = 14;
        mt[5][2] = 13;
        mt[5][3] = 15;
        mt[5][5] = 16;
        mt[5][6] = 17;
        mt[5][7] = 18;
        mt[5][9] = 19;
//        mt[5][31] = 20;
        mt[5][24] = 12;
//        mt[5][34] = 10;
        mt[5][52] = 20;
        mt[6][24] = 21;
        mt[7][35] = 22;
        mt[8][17] = 24;
        mt[8][18] = 25;

        mt[8][50] = 23;
        mt[8][51] = 23;
        mt[8][52] = 23;
        mt[8][53] = 23;
        mt[8][54] = 23;

        mt[9][3] = 26;
        mt[10][1] = 28;
        mt[10][2] = 28;
        mt[10][3] = 28;
        mt[10][4] = 27;
        mt[10][5] = 28;
        mt[10][6] = 28;
        mt[10][7] = 28;
        mt[10][9] = 28;
        mt[10][11] = 28;
        mt[10][19] = 28;
        mt[10][23] = 28;
        mt[10][24] = 28;
        mt[10][52] = 28;

        mt[11][50] = 29;
        mt[11][51] = 29;
        mt[11][52] = 29;
        mt[11][53] = 29;
        mt[11][54] = 29;
//        mt[11][21] = 29;
//        mt[11][25] = 29;
        mt[11][27] = 29;
//        mt[11][31] = 29;
//        mt[11][34] = 29;
        mt[12][21] = 31;
        mt[12][26] = 30;

        mt[13][50] = 32;
        mt[13][51] = 33;
        mt[13][52] = 34;
        mt[13][53] = 35;
        mt[13][54] = 36;

        mt[14][52] = 37;

        mt[15][20] = 38;
        mt[15][21] = 39;
        mt[15][25] = 39;
        mt[15][26] = 39;
        mt[15][27] = 39;
        mt[15][31] = 39;
        mt[15][34] = 39;

        mt[16][50] = 40;
        mt[16][51] = 40;
        mt[16][52] = 40;
        mt[16][53] = 40;
        mt[16][54] = 40;

        mt[17][21] = 42;
        mt[17][25] = 41;
        mt[17][26] = 42;
        mt[17][27] = 42;
        mt[17][31] = 42;
        mt[17][34] = 42;

        mt[18][1] = 43;

        mt[19][21] = 45;
        mt[19][34] = 44;

        mt[20][2] = 46;

        mt[21][5] = 47;

        mt[22][21] = 49;
        mt[22][29] = 48;

        mt[23][6] = 50;

        mt[24][7] = 51;

        mt[25][8] = 52;

        mt[26][53] = 53;
        mt[26][51] = 54;
        mt[26][50] = 55;

        mt[27][9] = 56;

        mt[28][8] = 57;
        mt[28][10] = 58;
        mt[28][23] = 58;

        mt[29][10] = 59;
        mt[29][23] = 60;

        mt[30][24] = 61;

        mt[31][16] = 62;

        mt[32][16] = 63;

        mt[33][24] = 64;

        mt[34][29] = 65;
        mt[34][21] = 66;

        mt[35][15] = 67;

        mt[36][24] = 68;

        mt[37][29] = 69;
        mt[37][21] = 70;

        mt[38][14] = 71;

        mt[39][20] = 72;

        mt[40][52] = 73;

        mt[41][29] = 74;
        mt[41][21] = 75;

        mt[42][52] = 76;

        mt[43][20] = 77;
        mt[43][35] = 78;

        int vecMov[]
                = {
                    45, 150
                };
        int vecMovAux[];
        int pr;
        int pc;
        int nl;
        int tv;
        Lexico le = new Lexico();
        boolean banderaErrores = true;
        int[] palabras;

//        int[] pa;
//        for (int i = 0; i < codigoFuente.length; i++) {
//            pa = codigoFuente[i].getPalabras();
//            for (int j = 0; j < pa.length; j++) {
//                System.out.println("Linea "+i+" co"+pa[j]);
//            }
//        }
        for (int h = 0; h < codigoFuente.length; h++) {
            palabras = codigoFuente[h].getPalabras();
            int i = 0;
            do {
                if (palabras.length == 0) {
                    break;
                }
                pr = vecMov[vecMov.length - 1];
                if (pr >= 150) {
                    pr = pr - 150;
                    pc = palabras[i];
                    nl = mt[pr][pc];
                    if (nl != -1) {
                        vecMovAux = vecMov;
                        vecMov = new int[(vecMovAux.length + mg[nl].length) - 1];
                        tv = 0;
                        for (int j = 0; j < vecMovAux.length - 1; j++) {
                            vecMov[j] = vecMovAux[j];
                        }
                        for (int j = vecMovAux.length - 1; j < vecMov.length; j++) {
                            vecMov[j] = mg[nl][tv];
                            tv++;
                        }
                    } else {
                        lbSin.setText("Sintactico: Incorrecto.");
                        banderaErrores = false;
                        String b = le.EtiquetarInvertido(palabras[i], false);

                        jTProgramaSintactico.setText(jTProgramaSintactico.getText()
                                + "Error sintactico en linea " + (h + 1) + " al recibir " + b + "\n");
                        int contador = 0;

                        i++;
                        vecMovAux = vecMov;
                        vecMov = new int[vecMovAux.length - contador];
                        for (int j = 0; j < vecMov.length; j++) {
                            vecMov[j] = vecMovAux[j];
                        }
                        break;
                    }
                } else {
                    if (palabras[i] == vecMov[vecMov.length - 1]) {
                        i++;
                        vecMovAux = vecMov;
                        vecMov = new int[vecMovAux.length - 1];
                        for (int j = 0; j < vecMov.length; j++) {
                            vecMov[j] = vecMovAux[j];
                        }
                    } else {
                        lbSin.setText("Sintactico: Incorrecto.");
                        banderaErrores = false;
                        String b = le.EtiquetarInvertido(palabras[i], false);

                        jTProgramaSintactico.setText(jTProgramaSintactico.getText()
                                + "Error sintactico en linea " + (h + 1) + " con: " + b + "\n");
                        i++;
                        int contador = 0;
                        vecMovAux = vecMov;
                        vecMov = new int[vecMovAux.length - contador];
                        for (int j = 0; j < vecMov.length; j++) {
                            vecMov[j] = vecMovAux[j];
                        }
                        break;
                    }
                }
            } while (i < palabras.length);
        }
        if (vecMov.length == 0 && banderaErrores == true) {
            lbSin.setText("Sintactico: Correcto.");
            pnSemantico.setVisible(true);
        }
    }//GEN-LAST:event_lbSintacticoMouseClicked

    private void lbSemanticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSemanticoMouseClicked
//        pnIntermedio.setVisible(true);
        String text = programaEjecutado;
        Semantico objSem = new Semantico();
        rangoFunMet = new ArrayList<>();
        int rang[];
        //Dividimos nuestro programa de acuerdo a los renglones
        String[] divisionRenglones = programaEjecutado.split("(?<=\\n)");
        StringTokenizer palabras, palabrasOper, palabrasAux;

        tablaIdenCol = new ArrayList<>();
        tablaIdenFunMet = new ArrayList<>();
        tablaIdenParam = new ArrayList<>();
        String palabra = "", texto = "";
        String mensaje = "";
        boolean palRep, varDec, banderaErrores = true, banderaVE = false;
        int palabrasAsig[];
        String rango[];
        List<String[]> rangosAsig = new ArrayList<>();

        //Iniciamos un recorrido para ver el rango de variables utilizadas en funciones y ademas declararlas
        for (int i = 0; i < divisionRenglones.length; i++) {
            palabras = new StringTokenizer(divisionRenglones[i], " =;(),");
            palabra = palabras.nextToken().replaceAll("\n", "");
            if (palabra.equals("FUN")) {
                /*Si encontramos la declaracion de una funcion entonces capturamos el renglon y el nombre de la funcion
                y empezamos a buscar las llaves que determinan cuando inicia y cuando termina esa funcion
                Creamos un arraylist para almacenar las palabras de ese renglon*/
                List<String> func = new ArrayList<>();
                String nom = "";
                palRep = false;
                while (palabras.hasMoreElements()) {
                    func.add(palabras.nextToken());
                }
                nom = func.get(1);
                rango = new String[3];
                rango[0] = nom;
                rango[1] = (i + 1) + "";
                //Salvamos el nombre de la funcion

                tablaIdenFilas = new String[5];
                //Agregamos en que linea de codigo fue hallado, ademas a que tipo de dato se refiere
                tablaIdenFilas[0] = String.valueOf(i + 1);
                tablaIdenFilas[1] = objSem.conversionNum(func.get(0));
                tablaIdenFilas[2] = func.get(1);
                tablaIdenFilas[3] = "FUN";
                //Validamos que no haya variables agregadas previamente a nuestro array
                if (!tablaIdenFunMet.isEmpty()) {
                    //Si a habido variables declaradas entonces ahora se pregunta si ya esta esa misma variable
                    for (int j = 0; j < tablaIdenFunMet.size(); j++) {
                        if (tablaIdenFunMet.get(j)[2].equals(tablaIdenFilas[2])) {
                            lbSem.setText("Semantico: Incorrecto");
                            jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Expresion de llamada repetida "
                                    + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                            palRep = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!tablaIdenCol.isEmpty()) {
                    //Si a habido variables declaradas entonces ahora se pregunta si ya esta esa misma variable
                    for (int j = 0; j < tablaIdenCol.size(); j++) {
                        if (tablaIdenCol.get(j)[2].equals(tablaIdenFilas[2])) {
                            lbSem.setText("Semantico: Incorrecto");
                            jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Expresion de llamada usada en variable "
                                    + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                            palRep = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!palRep) {
                    //Si la palabra no estaba repetida en fun/met, ahora se guardara para validar mas tarde su duplicidad
                    tablaIdenFunMet.add(tablaIdenFilas);
                    tablaIdenCol.add(tablaIdenFilas);
                }
                //Una vez que la funcion a sido guardada toca agregar los parametros de dicha funcion
                tablaIdenFilas = new String[3];
                for (int j = 2; j < func.size(); j++) {
                    //Cada dos datos es un parametro ya que se compone de TipoDato nombre
                    if (j % 2 == 0) {
                        tablaIdenFilas[0] = nom;
                        tablaIdenFilas[1] = objSem.conversionNum(func.get(j));

                    } else {
                        tablaIdenFilas[2] = func.get(j);
                        tablaIdenParam.add(tablaIdenFilas);
                        tablaIdenFilas = new String[3];
                    }
                }

                int lla = 1;
                for (int j = i + 1; j < divisionRenglones.length; j++) {
                    palabras = new StringTokenizer(divisionRenglones[j], " =;(),");
                    texto = "";
                    while (palabras.hasMoreElements()) {
                        texto = texto + palabras.nextToken();
                    }
                    if (texto.contains("{")) {
                        lla++;
                    } else if (texto.contains("}")) {
                        lla--;
                    }
                    if (lla == 0) {
                        rango[2] = (j + 1) + "";
                        rangosAsig.add(rango);
                        i = j;
                        break;
                    }
                }

            } else if (palabra.equals("MET")) {
                /*Si encontramos la declaracion de una funcion entonces capturamos el renglon y el nombre de la funcion
                y empezamos a buscar las llaves que determinan cuando inicia y cuando termina esa funcion
                un arraylist para almacenar las palabras de ese renglon*/
                List<String> met = new ArrayList<>();
                String nom = "";
                palRep = false;
                while (palabras.hasMoreElements()) {
                    met.add(palabras.nextToken());
                }
                //Salvamos el nombre del metodo eliminando los " ya que es una cadena
                nom = met.get(0).replaceAll("\"", "");
                rango = new String[3];
                rango[0] = nom;
                rango[1] = (i + 1) + "";
                int lla = 1;
                tablaIdenFilas = new String[5];
                //Agregamos en que linea de codigo fue hallado, ademas creamos un tipo de dato MET 60 por si se requiere
                tablaIdenFilas[0] = String.valueOf(i + 1);
                tablaIdenFilas[1] = objSem.conversionNum("MET");
                tablaIdenFilas[2] = nom;
                tablaIdenFilas[3] = "MET";
                //Validamos que no haya variables o metodos agregadas previamente a nuestro array
                if (!tablaIdenFunMet.isEmpty()) {
                    //Si a habido variables declaradas entonces ahora se pregunta si ya esta esa misma variable
                    for (int j = 0; j < tablaIdenFunMet.size(); j++) {
                        if (tablaIdenFunMet.get(j)[2].equals(tablaIdenFilas[2])) {
                            lbSem.setText("Semantico: Incorrecto");
                            jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Expresion de llamada repetida "
                                    + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                            palRep = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!tablaIdenCol.isEmpty()) {
                    //Si a habido variables declaradas entonces ahora se pregunta si ya esta esa misma variable
                    for (int j = 0; j < tablaIdenCol.size(); j++) {
                        if (tablaIdenCol.get(j)[2].equals(tablaIdenFilas[2])) {
                            lbSem.setText("Semantico: Incorrecto");
                            jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Expresion de llamada usada en variable "
                                    + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                            palRep = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!palRep) {
                    //Si la palabra no estaba repetida en fun/met, ahora se guardara para validar mas tarde su duplicidad
                    tablaIdenFunMet.add(tablaIdenFilas);
                    tablaIdenCol.add(tablaIdenFilas);
                }
                //Una vez que la funcion a sido guardada toca agregar los parametros de dicha funcion
                tablaIdenFilas = new String[3];
                for (int j = 1; j < met.size(); j++) {
                    //Cada dos datos es un parametro ya que se compone de TipoDato nombre
                    if (j % 2 != 0) {
                        tablaIdenFilas[0] = nom;
                        tablaIdenFilas[1] = objSem.conversionNum(met.get(j));

                    } else {
                        tablaIdenFilas[2] = met.get(j);
                        tablaIdenParam.add(tablaIdenFilas);
                        tablaIdenFilas = new String[3];
                    }
                }

                for (int j = i + 1; j < divisionRenglones.length; j++) {
                    palabras = new StringTokenizer(divisionRenglones[j], " =;(),");
                    texto = "";
                    while (palabras.hasMoreElements()) {
                        texto = texto + palabras.nextToken();
                    }
                    if (texto.contains("{")) {
                        lla++;
                    } else if (texto.contains("}")) {
                        lla--;
                    }
                    if (lla == 0) {
                        rango[2] = (j + 1) + "";
                        rangosAsig.add(rango);
                        i = j;
                        break;
                    }
                }

            }
        }
        for (int i = 0; i < rangosAsig.size(); i++) {
            System.out.println("Funcion: " + rangosAsig.get(i)[0] + " de linea: " + rangosAsig.get(i)[1] + " a " + rangosAsig.get(i)[2]);
        }
        //Fin de la primera fase e inicio de la segunda

        //Iniciamos el recorrido de los renglones
        for (int i = 0; i < divisionRenglones.length; i++) {
            //Separamos las palabras en un arreglo, de un renglon determinado por el ciclo 
            palabras = new StringTokenizer(divisionRenglones[i], " =;(),");
            palabrasAux = new StringTokenizer(divisionRenglones[i], " =;(),");

            texto = "";
            while (palabrasAux.hasMoreElements()) {
                texto = texto + palabrasAux.nextToken();
            }
            //Guardamos tambien en otro arreglo los operadores sin contar los espacios en blanco
            palabrasOper = new StringTokenizer(texto, "=+-*/", true);
            palabra = palabras.nextToken().replaceAll("\n", "");
            if (palabra.equals("NUM") || palabra.equals("CAD")
                    || palabra.equals("CHAR") || palabra.equals("BOOL")) {
                //Encuentra declaracion de dato, almacenamos a que tipo se refiere
                String tipo = palabra;
                palRep = false;
                tablaIdenFilas = new String[5];
                //Agregamos en que linea de codigo fue hallado, ademas a que tipo de dato se refiere
                tablaIdenFilas[0] = String.valueOf(i + 1);
                tablaIdenFilas[1] = objSem.conversionNum(palabra);
                tablaIdenFilas[2] = palabras.nextToken();

                //Validamos que existan o no funciones/metodos
                if (!rangosAsig.isEmpty()) {
                    String l = " ";
                    for (int j = 0; j < rangosAsig.size(); j++) {
                        /*Si al recorrer los rangos agregados comprobamos que 
                        la delcaracion esta entre el rango de alguna funcion entonces llamaremos a sus parametros*/
                        if (i >= Integer.parseInt(rangosAsig.get(j)[1])
                                && i <= Integer.parseInt(rangosAsig.get(j)[2])) {
                            l = rangosAsig.get(j)[0];
                            break;
                        }
                    }
                    /*Una vez que haya encontrado el nombre del metodo podra ir comparando ahora el nombre de las 
                    variables que tengan esos parametros y determinar si ya a sido declarada antes*/
                    if (!l.equals(" ")) {
                        for (int j = 0; j < tablaIdenParam.size(); j++) {
                            if (tablaIdenParam.get(j)[0].equals(l)) {
                                if (tablaIdenFilas[2].equals(tablaIdenParam.get(j)[2])) {
                                    lbSem.setText("Semantico: Incorrecto");
                                    jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Variable en parametro de funcion "
                                            + tablaIdenParam.get(j)[0] + " en la linea " + tablaIdenFilas[0] + "\n");
                                    palRep = true;
                                    banderaErrores = false;
                                }
                            }
                        }
                    }
                }
                //Validamos que no haya variables agregadas previamente a nuestro array
                if (!tablaIdenCol.isEmpty() && !tablaIdenFilas.equals("=") && !palRep) {
                    //Si a habido variables declaradas entonces ahora se pregunta si ya esta esa misma variable
                    for (int j = 0; j < tablaIdenCol.size(); j++) {
                        if (tablaIdenCol.get(j)[2].equals(tablaIdenFilas[2])) {
                            lbSem.setText("Semantico: Incorrecto");
                            jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Variable repetida "
                                    + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                            palRep = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!palRep) {
                    //Si la palabra no estaba repetida en declaracion, ahora se guardara para validar mas tarde su duplicidad
                    tablaIdenCol.add(tablaIdenFilas);
                }
            }//Validamos si lo que se esta declarando es una funcion o un metodo para obtener parametros
            //Si no se esta declarando verificaremos si se realiza alguna accion con la variable
            else {
                varDec = false;
                int y = 0;
                banderaVE = false;
                //Obtenemos las palabras de ese renglon
                palabrasAsig = codigoFuente[i].getPalabras();
                //Verificamos que se trate de una asignacion
                if (palabrasAsig.length != 0 && palabrasAsig[0] == 52 && palabrasAsig[1] == 35) {
                    //Verificamos que la variable haya sido declarada
                    if (!rangosAsig.isEmpty()) {
                        String l = " ";
                        for (int j = 0; j < rangosAsig.size(); j++) {
                            /*Si al recorrer los rangos agregados comprobamos que 
                                la delcaracion esta entre el rango de alguna funcion entonces llamaremos a sus parametros*/
                            if (i >= Integer.parseInt(rangosAsig.get(j)[1])
                                    && i <= Integer.parseInt(rangosAsig.get(j)[2])) {
                                l = rangosAsig.get(j)[0];
                                break;
                            }
                        }
                        /*Una vez que haya encontrado el nombre del metodo podra ir comparando ahora el nombre de las 
                            variables que tengan esos parametros y determinar si ya a sido declarada antes*/
                        if (!l.equals(" ")) {
                            for (int j = 0; j < tablaIdenParam.size(); j++) {
                                if (tablaIdenParam.get(j)[0].equals(l)) {
                                    if (palabra.equals(tablaIdenParam.get(j)[2])) {
                                        banderaVE = true;
//                                            lbSem.setText("Semantico: Correcto");
                                        //Variable declarada continua procedimiento
                                    }
                                }
                            }
                        }
                    }
                    /*Como se trata de asignacion verificaremos que la palabra anteriormente guardada
                    este declarada en nuestra lista de variables
                     */
                    if (!banderaVE) {
                        for (int j = 0; j < tablaIdenCol.size(); j++) {
                            if (tablaIdenCol.get(j)[2].equals(palabra)) {
                                banderaVE = true;
                                y = j;
                                break;
                            }
                        }
                    }
                    /*Si la variable fue declarada, por el momento es correcto y 
                    se validaran sus operaciones correspondientes a la asignacion*/
                    if (banderaVE) {
//                        lbSem.setText("Semantico: Correcto");
                    } else {
                        lbSem.setText("Semantico: Incorrecto");
                        jTProgramaSemantico.setText(jTProgramaSemantico.getText() + "Variable repetida "
                                + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n");
                        banderaErrores = false;
                    }
                }
            }
        }
        for (int i = 0; i < tablaIdenCol.size(); i++) {
            System.out.println("Variables declaradas: " + tablaIdenCol.get(i)[2]);
        }
        for (int i = 0; i < tablaIdenParam.size(); i++) {
            System.out.println("Llamada " + tablaIdenParam.get(i)[0] + " con parametro " + tablaIdenParam.get(i)[2]);
        }
        if (banderaErrores) {
            lbSem.setText("Semánticamente Correcto");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_lbSemanticoMouseClicked


    private void lbIntermedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIntermedioMouseClicked
        pnOptimizacion.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbIntermedioMouseClicked

    private void lbOptimizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbOptimizacionMouseClicked
        pnObjeto.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbOptimizacionMouseClicked

    private void lbCargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbCargarMouseClicked
        pnSintactico.setVisible(false);
        pnSemantico.setVisible(false);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);
        lbLex.setText("Lexico:");
        lbSin.setText("Sintactico:");
        lbSem.setText("Semantico:");
        jTProgramaCompilado.setText("");
        jTProgramaSintactico.setText("");
        jTProgramaSemantico.setText("");
        erroresLexicos.setText("");
        // TODO add your handling code here:
        jTProgramaFuente.setText(ManejoArchivos.cargarArchivo());
    }//GEN-LAST:event_lbCargarMouseClicked

    private void lbGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGuardarMouseClicked
        try {
            ManejoArchivos.guardarArchivo(jTProgramaFuente.getText());
            // TODO add your handling code here:

        } catch (IOException ex) {
            Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Archivo Guardado con exito.");
    }//GEN-LAST:event_lbGuardarMouseClicked

    private void jTProgramaFuenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProgramaFuenteKeyTyped
        lbLexico.setText("Lexico:");
        lbSintactico.setText("Sintactico:");
        lbSemantico.setText("Semantico:");
    }//GEN-LAST:event_jTProgramaFuenteKeyTyped

    private void cambiaC(int l) {
        jTProgramaFuente.getLineCount();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea erroresLexicos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTProgramaCompilado;
    private javax.swing.JTextArea jTProgramaFuente;
    private javax.swing.JTextArea jTProgramaSemantico;
    private javax.swing.JTextArea jTProgramaSintactico;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbCargar;
    private javax.swing.JLabel lbGuardar;
    private javax.swing.JLabel lbIntermedio;
    private javax.swing.JLabel lbLex;
    private javax.swing.JLabel lbLexico;
    private javax.swing.JLabel lbObjeto;
    private javax.swing.JLabel lbOptimizacion;
    private javax.swing.JLabel lbSem;
    private javax.swing.JLabel lbSemantico;
    private javax.swing.JLabel lbSin;
    private javax.swing.JLabel lbSintactico;
    private javax.swing.JPanel pnCarga1;
    private javax.swing.JPanel pnContenedor;
    private javax.swing.JPanel pnGuardar;
    private javax.swing.JPanel pnIntermedio;
    private javax.swing.JPanel pnLexico;
    private javax.swing.JPanel pnObjeto;
    private javax.swing.JPanel pnOptimizacion;
    private javax.swing.JPanel pnSemantico;
    private javax.swing.JPanel pnSintactico;
    // End of variables declaration//GEN-END:variables
}
