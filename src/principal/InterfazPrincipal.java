package principal;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Diego
 */
public class InterfazPrincipal extends javax.swing.JFrame {

    int vecSal[];
    NumLinecita numlinea;
    Lexico lexInv = new Lexico();
    Renglon[] codigoFuente;

    String[] tablaIdenFilas;
    ArrayList<String[]> tablaIdenCol = new ArrayList<>();
    /**
     * Creates new form InterfazPrincipal
     */
    public InterfazPrincipal() {
        initComponents();
        numlinea = new NumLinecita(jTProgramaFuente);
        jScrollPane1.setRowHeaderView(numlinea);
        pnSintactico.setVisible(false);
        pnSemantico.setVisible(false);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnContenedor = new javax.swing.JPanel();
        pnCarga1 = new javax.swing.JPanel();
        lbCargar = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnGuardar = new javax.swing.JPanel();
        lbGuardar = new javax.swing.JLabel();
        pnSintactico = new javax.swing.JPanel();
        lbSintactico = new javax.swing.JLabel();
        pnSemantico = new javax.swing.JPanel();
        lbSemantico = new javax.swing.JLabel();
        pnOptimizacion = new javax.swing.JPanel();
        lbOptimizacion = new javax.swing.JLabel();
        pnIntermedio = new javax.swing.JPanel();
        lbIntermedio = new javax.swing.JLabel();
        pnLexico = new javax.swing.JPanel();
        lbLexico = new javax.swing.JLabel();
        pnObjeto = new javax.swing.JPanel();
        lbObjeto = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTProgramaFuente = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTProgramaCompilado = new javax.swing.JTextArea();
        lbLex = new javax.swing.JLabel();
        lbSin = new javax.swing.JLabel();
        lbSem = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTProgramaSintactico = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTProgramaSemantico = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnContenedor.setBackground(new java.awt.Color(255, 255, 255));
        pnContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbCargar.setText("Cargar");
        lbCargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbCargarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnCarga1Layout = new javax.swing.GroupLayout(pnCarga1);
        pnCarga1.setLayout(pnCarga1Layout);
        pnCarga1Layout.setHorizontalGroup(
            pnCarga1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCarga1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnCarga1Layout.setVerticalGroup(
            pnCarga1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCarga1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnCarga1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 240, 70, 30));

        jLabel1.setText("Programa Fuente");
        pnContenedor.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        jLabel2.setText("Programa Compilado");
        pnContenedor.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        lbGuardar.setText("Guardar");
        lbGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGuardarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnGuardarLayout = new javax.swing.GroupLayout(pnGuardar);
        pnGuardar.setLayout(pnGuardarLayout);
        pnGuardarLayout.setHorizontalGroup(
            pnGuardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );
        pnGuardarLayout.setVerticalGroup(
            pnGuardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        pnContenedor.add(pnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 20, 70, 30));

        lbSintactico.setText("Sintactico");
        lbSintactico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSintacticoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnSintacticoLayout = new javax.swing.GroupLayout(pnSintactico);
        pnSintactico.setLayout(pnSintacticoLayout);
        pnSintacticoLayout.setHorizontalGroup(
            pnSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSintacticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnSintacticoLayout.setVerticalGroup(
            pnSintacticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSintacticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnSintactico, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 450, 70, 30));

        lbSemantico.setText("Semantico");
        lbSemantico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSemanticoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnSemanticoLayout = new javax.swing.GroupLayout(pnSemantico);
        pnSemantico.setLayout(pnSemanticoLayout);
        pnSemanticoLayout.setHorizontalGroup(
            pnSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSemanticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSemantico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnSemanticoLayout.setVerticalGroup(
            pnSemanticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSemanticoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbSemantico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnSemantico, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 440, 70, 30));

        lbOptimizacion.setText("Optimizacion");
        lbOptimizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbOptimizacionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnOptimizacionLayout = new javax.swing.GroupLayout(pnOptimizacion);
        pnOptimizacion.setLayout(pnOptimizacionLayout);
        pnOptimizacionLayout.setHorizontalGroup(
            pnOptimizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOptimizacionLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbOptimizacion))
        );
        pnOptimizacionLayout.setVerticalGroup(
            pnOptimizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOptimizacionLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbOptimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnOptimizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 140, 70, 30));

        lbIntermedio.setText("Intermedio");
        lbIntermedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbIntermedioMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnIntermedioLayout = new javax.swing.GroupLayout(pnIntermedio);
        pnIntermedio.setLayout(pnIntermedioLayout);
        pnIntermedioLayout.setHorizontalGroup(
            pnIntermedioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnIntermedioLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnIntermedioLayout.setVerticalGroup(
            pnIntermedioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnIntermedioLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnIntermedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 190, 70, 30));

        lbLexico.setText("Lexico");
        lbLexico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLexicoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnLexicoLayout = new javax.swing.GroupLayout(pnLexico);
        pnLexico.setLayout(pnLexicoLayout);
        pnLexicoLayout.setHorizontalGroup(
            pnLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLexicoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnLexicoLayout.setVerticalGroup(
            pnLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLexicoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnLexico, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 70, 30));

        lbObjeto.setText("Objeto");

        javax.swing.GroupLayout pnObjetoLayout = new javax.swing.GroupLayout(pnObjeto);
        pnObjeto.setLayout(pnObjetoLayout);
        pnObjetoLayout.setHorizontalGroup(
            pnObjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnObjetoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnObjetoLayout.setVerticalGroup(
            pnObjetoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnObjetoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbObjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnContenedor.add(pnObjeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 80, 70, 30));

        jTProgramaFuente.setColumns(20);
        jTProgramaFuente.setRows(5);
        jTProgramaFuente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTProgramaFuenteKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTProgramaFuente);

        pnContenedor.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 510, 230));

        jTProgramaCompilado.setColumns(20);
        jTProgramaCompilado.setRows(5);
        jScrollPane2.setViewportView(jTProgramaCompilado);

        pnContenedor.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 300, 100));

        lbLex.setText("Lexico:");
        pnContenedor.add(lbLex, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, -1, -1));

        lbSin.setText("Sintactico:");
        pnContenedor.add(lbSin, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 280, -1, -1));

        lbSem.setText("Semantico:");
        pnContenedor.add(lbSem, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 280, -1, -1));

        jTProgramaSintactico.setColumns(20);
        jTProgramaSintactico.setRows(5);
        jScrollPane3.setViewportView(jTProgramaSintactico);

        pnContenedor.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, 310, 100));

        jTProgramaSemantico.setColumns(20);
        jTProgramaSemantico.setRows(5);
        jScrollPane4.setViewportView(jTProgramaSemantico);

        pnContenedor.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, 260, 100));
        pnContenedor.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 170, 210));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lbLexicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLexicoMouseClicked
        String[] divisionRenglones = {jTProgramaFuente.getText()};
        String resultadoLexico = "";
        codigoFuente = new Renglon[divisionRenglones.length + 1];
        Renglon renglon;
        for (int i = 0; i < divisionRenglones.length; i++) {
            StringTokenizer st = new StringTokenizer(divisionRenglones[i], "+-^*/()%#;=<>{}& \n\b\r\t\",:'", true);
            String texto = "";
            String cadena;
            while (st.hasMoreElements()) {
                cadena = st.nextToken();
                if (cadena.equals("=")) {
                    texto = texto + cadena;
                    if (st.hasMoreElements()) {
                        cadena = st.nextToken();
                        if (cadena.equals("=")) {
                            texto = texto + cadena + "\n";
                        } else if (!(cadena.equals(" ") || cadena.equals("\t"))) {
                            texto = texto + "\n" + cadena + "\n";
                        } else {
                            texto = texto + "\n";
                        }
                    }
                } else {
                    if (cadena.equals("<") || cadena.equals(">") || cadena.equals("!")) {
                        texto = texto + cadena;
                        if (st.hasMoreElements()) {
                            cadena = st.nextToken();
                            if (cadena.equals("=")) {
                                texto = texto + cadena + "\n";
                            } else if (!(cadena.equals(" ") || cadena.equals("\t"))) {
                                texto = texto + "\n" + cadena + "\n";

                            } else {
                                texto = texto + "\n";
                            }
                        }
                    } else {
                        if (cadena.equals("&")) {
                            texto = texto + cadena;
                            if (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("&")) {
                                    texto = texto + cadena + "\n";
                                } else {
                                    texto = texto + "\n" + cadena + "\n";
                                }
                            }
                        } else if (cadena.equals("\"")) {
                            texto = texto + cadena;
                            while (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("\"")) {
                                    texto = texto + cadena + "\n";
                                    break;
                                }
                                texto = texto + cadena;
                            }
                        } else if (cadena.equals(" ") || cadena.equals("\t")) {
                            cadena = "";
                        } else if (cadena.equals("'")) {
                            texto = texto + cadena;
                            while (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("'")) {
                                    texto = texto + cadena + "\n";
                                    break;
                                }
                                texto = texto + cadena;
                            }
                        } else {
                            texto = texto + cadena + "\n";
                        }
                    }
                }
            }
            StringTokenizer st2 = new StringTokenizer(texto, "\n\r\f");
            Lexico objLex2 = new Lexico();
            vecSal = new int[st2.countTokens() + 1];
            int j = 0;
            while (st2.hasMoreElements()) {
                objLex2 = objLex2.Etiquetar(st2.nextToken());
                resultadoLexico = resultadoLexico + objLex2.lexema + "\t" + objLex2.nombre + "\n";
                vecSal[j] = objLex2.numero;
                j++;
            }
            renglon = new Renglon(vecSal);
            codigoFuente[i] = renglon;
        }
        //////
        if (vecSal != null) {
            vecSal[vecSal.length - 1] = 53;
            boolean b = true;
            for (int j = 0; j < vecSal.length; j++) {
                switch (vecSal[j]) {
                    case 105:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                        b = false;
                        break;
                }
            }
            if (b) {
                lbLex.setText("Lexicamente: Correcto.");
                pnSintactico.setVisible(true);
            } else {
                lbLex.setText("Lexicamente: Incorrecto.");
            }
        }
        jTProgramaCompilado.setText(resultadoLexico);
//        jTProgramaCompilado.setText(texto);
    }//GEN-LAST:event_lbLexicoMouseClicked

    private void lbSintacticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSintacticoMouseClicked
        pnSemantico.setVisible(true);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);

        jTProgramaSintactico.setText("");
        jTProgramaSemantico.setText("");
        int[] pp
                = {
                    56
                };
        Renglon p = new Renglon(pp);
        codigoFuente[codigoFuente.length - 1] = p;

        String cadena = "";
//        for (int i = 0; i < vecSal.length; i++) {
//            cadena = cadena + vecSal[i] + " ";
//        }
//        cadena += "$";

//        jTProgramaCompilado.setText(cadena);
//        jLabel1.setText("Movimiento");
//        jLabel2.setText("Cadena a validar");
//        jTProgramaSintactico.setText("$ 150");
        int mg[][] = {{},
        {23, 188, 152, 151, 22, 51, 12},
        {151, 31, 51, 13},
        {},
        {152, 153},
        {},
        {156},
        {192},
        {185},
        {182},
        {154, 155},
        {},
        {156},
        {170},
        {168},
        {159},
        {171},
        {173},
        {174},
        {177},
        {31, 193, 52},
        {31, 52, 24},
        {158, 35},
        {166},
        {17},
        {18},
        {160, 23, 154, 22, 21, 161, 20, 3},
        {23, 154, 22, 4},
        {},
        {162, 166, 27, 166},
        {161, 26},
        {},
        {50},
        {51},
        {164},
        {53},
        {54},
        {165, 52},
        {189},
        {},
        {167, 163},
        {167, 163, 25},
        {},
        {31, 21, 169, 166, 20, 1},
        {169, 166, 34},
        {},
        {31, 21, 52, 20, 2},
        {23, 154, 22, 21, 172, 50, 30, 50, 20, 5},
        {50, 29},
        {},
        {23, 154, 22, 21, 161, 20, 6},
        {31, 21, 161, 20, 6, 23, 154, 22, 7},
        {31, 11, 154, 30, 176, 8},
        {53},
        {51},
        {50},
        {23, 178, 22, 21, 52, 20, 9},
        {178, 175},
        {179},
        {154, 30, 10},
        {},
        {52, 24},
        {180, 16},
        {23, 31, 52, 19, 154, 22, 21, 183, 20, 181},
        {184, 180},
        {183, 29},
        {},
        {23, 154, 22, 21, 186, 20, 51, 15},
        {187, 180},
        {186, 29},
        {},
        {23, 154, 22, 14},
        {21, 190, 20},
        {191, 52},
        {191, 52, 29},
        {},
        {31, 157, 52},
        {189},
        {157}
        };
        //Antiguo proyecto
//        int mg[][] = {{},
//        {159, 8, 150, 7, 6, 152, 5, 3},
//        {8, 150, 7, 4},
//        {},
//        {153, 157, 14, 157},
//        {152, 13},
//        {},
//        {18, 52, 10},
//        {18, 156, 22, 52},
//        {160, 52},
//        {160, 51},
//        {160, 50},
//        {52},
//        {51},
//        {50},
//        {154},
//        {164},
//        {162},
//        {158},
//        {155},
//        {165},
//        {150, 151},
//        {},
//        {160, 157, 161},
//        {},
//        {12},
//        {21},
//        {18, 6, 163, 157, 5, 1},
//        {163, 157, 21},
//        {},
//        {18, 6, 52, 5, 2},
//        {8, 150, 7, 6, 166, 50, 17, 50, 5, 9},
//        {50, 16},
//        {}
//        };
        int mt[][] = new int[45][55];
        for (int i = 0; i < 45; i++) {
            for (int j = 0; j < 55; j++) {
                mt[i][j] = -1;
            }
        }
        mt[0][12] = 1;
        mt[1][13] = 2;
        mt[1][14] = 3;
        mt[1][15] = 3;
        mt[1][16] = 3;
        mt[1][24] = 3;
        mt[1][52] = 3;
        mt[2][14] = 5;
        mt[2][15] = 4;
        mt[2][16] = 4;
        mt[2][24] = 4;
        mt[2][52] = 4;
        mt[3][15] = 8;
        mt[3][16] = 9;
        mt[3][24] = 6;
        mt[3][31] = 7;
        mt[3][52] = 7;
        mt[4][1] = 10;
        mt[4][2] = 10;
        mt[4][3] = 10;
        mt[4][5] = 10;
        mt[4][6] = 10;
        mt[4][7] = 10;
        mt[4][9] = 10;
        mt[4][11] = 11;
        mt[4][19] = 11;
        mt[4][23] = 11;
        mt[4][24] = 10;
        mt[4][52] = 10;
        mt[5][1] = 14;
        mt[5][2] = 13;
        mt[5][3] = 15;
        mt[5][5] = 16;
        mt[5][6] = 17;
        mt[5][7] = 18;
        mt[5][9] = 19;
//        mt[5][31] = 20;
        mt[5][24] = 12;
//        mt[5][34] = 10;
        mt[5][52] = 20;
        mt[6][24] = 21;
        mt[7][35] = 22;
        mt[8][17] = 24;
        mt[8][18] = 25;
//        mt[8][21] = 23;
//        mt[8][25] = 23;
//        mt[8][27] = 23;
//        mt[8][31] = 23;
//        mt[8][34] = 23;
        mt[8][50] = 23;
        mt[8][51] = 23;
        mt[8][52] = 23;
        mt[8][53] = 23;
        mt[8][54] = 23;

        mt[9][3] = 26;
        mt[10][1] = 28;
        mt[10][2] = 28;
        mt[10][3] = 28;
        mt[10][4] = 27;
        mt[10][5] = 28;
        mt[10][6] = 28;
        mt[10][7] = 28;
        mt[10][9] = 28;
        mt[10][11] = 28;
        mt[10][19] = 28;
        mt[10][23] = 28;
        mt[10][24] = 28;
        mt[10][52] = 28;

        mt[11][50] = 29;
        mt[11][51] = 29;
        mt[11][52] = 29;
        mt[11][53] = 29;
        mt[11][54] = 29;
//        mt[11][21] = 29;
//        mt[11][25] = 29;
        mt[11][27] = 29;
//        mt[11][31] = 29;
//        mt[11][34] = 29;
        mt[12][21] = 31;
        mt[12][26] = 30;

        mt[13][50] = 32;
        mt[13][51] = 33;
        mt[13][52] = 34;
        mt[13][53] = 35;
        mt[13][54] = 36;

        mt[14][52] = 37;

        mt[15][20] = 38;
        mt[15][21] = 39;
        mt[15][25] = 39;
        mt[15][26] = 39;
        mt[15][27] = 39;
        mt[15][31] = 39;
        mt[15][34] = 39;
//        mt[16][21] = 40;
//        mt[16][25] = 40;
//        mt[16][27] = 40;
//        mt[16][31] = 40;
//        mt[16][34] = 40;
        mt[16][50] = 40;
        mt[16][51] = 40;
        mt[16][52] = 40;
        mt[16][53] = 40;
        mt[16][54] = 40;

        mt[17][21] = 42;
        mt[17][25] = 41;
        mt[17][26] = 42;
        mt[17][27] = 42;
        mt[17][31] = 42;
        mt[17][34] = 42;
//        mt[17][50] = 40;
//        mt[17][51] = 40;
//        mt[17][52] = 40;
//        mt[17][53] = 40;
//        mt[17][54] = 40;
        mt[18][1] = 43;

        mt[19][21] = 45;
        mt[19][34] = 44;

        mt[20][2] = 46;

        mt[21][5] = 47;

        mt[22][21] = 49;
        mt[22][29] = 48;

        mt[23][6] = 50;

        mt[24][7] = 51;

        mt[25][8] = 52;

        mt[26][53] = 53;
        mt[26][51] = 54;
        mt[26][50] = 55;

        mt[27][9] = 56;

        mt[28][8] = 57;
        mt[28][10] = 58;
        mt[28][23] = 58;

        mt[29][10] = 59;
        mt[29][23] = 60;

        mt[30][24] = 61;

        mt[31][16] = 62;

        mt[32][16] = 63;

        mt[33][24] = 64;

        mt[34][29] = 65;
        mt[34][21] = 66;

        mt[35][15] = 67;

        mt[36][24] = 68;

        mt[37][29] = 69;
        mt[37][21] = 70;

        mt[38][14] = 71;

        mt[39][20] = 72;

        mt[40][52] = 73;

        mt[41][29] = 74;
        mt[41][21] = 75;

        mt[42][52] = 76;

//        mt[43][24] = 76;
//        mt[43][15] = 76;
//        mt[43][16] = 76;
//        mt[43][14] = 76;
        mt[43][20] = 77;
        mt[43][35] = 78;

        //Antiguo proyecto
//        mt[8][3] = 1;
//        mt[9][1] = 3;
//        mt[9][2] = 3;
//        mt[9][3] = 3;
//        mt[9][4] = 2;
//        mt[9][8] = 3;
//        mt[9][9] = 3;
//        mt[9][10] = 3;
//        mt[9][52] = 3;
//        mt[9][53] = 3;
//        mt[2][50] = 4;
//        mt[2][51] = 4;
//        mt[2][52] = 4;
//        mt[3][6] = 6;
//        mt[3][13] = 5;
//        mt[4][10] = 7;
//        mt[5][52] = 8;
//        mt[6][50] = 11;
//        mt[6][51] = 10;
//        mt[6][52] = 9;
//        mt[7][50] = 14;
//        mt[7][51] = 13;
//        mt[7][52] = 12;
//        mt[1][1] = 17;
//        mt[1][2] = 16;
//        mt[1][3] = 18;
//        mt[1][9] = 20;
//        mt[1][10] = 15;
//        mt[1][52] = 19;
//        mt[0][1] = 21;
//        mt[0][2] = 21;
//        mt[0][3] = 21;
//        mt[0][8] = 22;
//        mt[0][9] = 21;
//        mt[0][10] = 21;
//        mt[0][52] = 21;
//        mt[0][53] = 22;
//        mt[10][12] = 23;
//        mt[10][18] = 24;
//        mt[10][21] = 23;
//        mt[11][12] = 25;
//        mt[11][21] = 26;
//        mt[12][1] = 27;
//        mt[13][6] = 29;
//        mt[13][21] = 28;
//        mt[14][2] = 30;
//        mt[15][9] = 31;
//        mt[16][16] = 32;
//        mt[16][6] = 33;
        int vecMov[] = {0, 150};
        int vecMovAux[];
        int i = 0;
        int pr;
        int pc = 0;
        int nl = 0;
        int tv = 0;
        ////////////////////////////////////////////////////////////Modificacion
       cadena = "";
        String pF = jTProgramaFuente.getText() + "\n";
        String pC = "";
        int lin = 0;

        do {
            pr = vecMov[vecMov.length - 1];
            if (pr >= 150) {
                pr = pr - 150;
                pc = vecSal[i];
                nl = mt[pr][pc];
                if (nl != -1) {
                    vecMovAux = vecMov;
                    vecMov = new int[(vecMovAux.length + mg[nl].length) - 1];
                    tv = 0;
                    for (int j = 0; j < vecMovAux.length - 1; j++) {
                        vecMov[j] = vecMovAux[j];
                    }
                    for (int j = vecMovAux.length - 1; j < vecMov.length; j++) {
                        vecMov[j] = mg[nl][tv];
                        tv++;
                    }
                    cadena = pF;
                    for (int j = 0; j < vecMov.length; j++) {
                        cadena = cadena + vecMov[j] + " ";
                    }
                    pF = cadena;
                    lin++;
                    cadena = pF + "\n";
                    for (int j = i; j < vecSal.length - 1; j++) {
                        cadena = cadena + vecSal[j] + " ";
                    }
                    cadena = cadena + "$";
                    pC = cadena;
                } else {
                    cadena = pF + "\nError sintactico al recibir [" + vecSal[i] + "] se esperaba ";
                    jTProgramaSintactico.setText("Error sintactico al recibir [" + lexInv.EtiquetarInvertido(vecSal[i]) + "] se esperaba ");
                    lbSin.setText("Sintactico: Incorrecto.");
                    for (int j = 0; j < 55; j++) {
                        if (mt[pr][j] != -1) {
                            cadena = cadena + j + " ";
                        }
                    }
                    pF = cadena;
                    break;
                }
            } else {
                if (vecSal[i] == vecMov[vecMov.length - 1]) {
                    i++;
                    vecMovAux = vecMov;
                    vecMov = new int[vecMovAux.length - 1];
                    for (int j = 0; j < vecMov.length; j++) {
                        vecMov[j] = vecMovAux[j];
                    }
                    cadena = pF + "\n";
                    for (int j = 0; j < vecMov.length; j++) {
                        cadena = cadena + vecMov[j] + " ";
                    }
                    pF = cadena;

                    cadena = pC + "\n";
                    for (int j = i; j < vecSal.length - 1; j++) {
                        cadena = cadena + vecSal[j] + " ";
                    }
                    cadena = cadena + "$";
                    pC = cadena;
                } else {
                    if (vecSal[i] == 53 && vecMov[vecMov.length - 1] == 0) {
                        break;
                    }
                    int n = 0;
                    Lexico obLex = new Lexico();
                    while (n < obLex.dic.length) {
                        if (Integer.toString(vecSal[i]).equals(obLex.dic[n][2])) {
                            obLex.nombre = obLex.dic[n][1];
                            break;
                        } else if (vecSal[i] == 50) {
                            obLex.nombre = "Numerico";
                            break;
                        } else if (vecSal[i] == 51) {
                            obLex.nombre = "Cadena";
                            break;
                        } else if (vecSal[i] == 52) {
                            obLex.nombre = "Variable";
                            break;
                        } else if (vecSal[i] == 53) {
                            obLex.nombre = "Caracter";
                            break;
                        } else if (vecSal[i] == 54) {
                            obLex.nombre = "Booleano";
                            break;
                        }
                        n++;
                    }
                    cadena = pF + "\nError sintactico al recibir: " + obLex.nombre;
                    jTProgramaSintactico.setText("Error sintactico al recibir [" + obLex.nombre + "] se esperaba ");
                    lbSin.setText("Sintactico: Incorrecto.");
                    n = 0;
                    obLex.nombre = "";
                    while (n < obLex.dic.length) {
                        if (Integer.toString(vecMov[vecMov.length - 1]).equals(obLex.dic[n][2])) {
                            obLex.nombre = obLex.dic[n][1];
                            break;
                        } else if (vecMov[vecMov.length - 1] == 50) {
                            obLex.nombre = "Numerico";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 51) {
                            obLex.nombre = "Cadena";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 52) {
                            obLex.nombre = "Variable";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 53) {
                            obLex.nombre = "Caracter";
                            break;

                        } else if (vecMov[vecMov.length - 1] == 54) {
                            obLex.nombre = "Boolean";
                            break;
                        }
                        n++;
                    }
                    if (!obLex.nombre.equals("")) {
                        cadena = cadena + "\nSe esperaba: " + obLex.nombre;
                        jTProgramaSintactico.setText("\nSe esperaba: " + obLex.nombre + " Linea " + i);
                    }
                    pF = cadena;
                    break;
                }

            }
        } while (i < vecSal.length);
        if (vecMov[vecMov.length - 1] == 0 && !pF.contains("Error")) {
            cadena = pF + "\nSintacticamente Correcto";
            lbSin.setText("Sintactico: Correcto.");
            pF = cadena;
        }
    }//GEN-LAST:event_lbSintacticoMouseClicked

    private void lbSemanticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSemanticoMouseClicked
        pnIntermedio.setVisible(true);
        String text = jTProgramaFuente.getText();
        if (text.contains("IMP")) {
            System.out.println("Se encontro la palabra IMP");
        }
        Semantico objSem = new Semantico();
        Lexico objLexico = new Lexico();
        String[] divisionRenglones = jTProgramaFuente.getText().split("(<=\n)");
        StringTokenizer palabras, palabrasOper, palabrasAux;
        String palabra = "", texto = "";
        String mensaje = "";
        boolean banDuplicada, banderaVV, banderaErrores = true, banderaVE = false;
        int palabrasAsig[];
        for (int i = 0; i < divisionRenglones.length; i++) {
            palabras = new StringTokenizer(divisionRenglones[i], " ;,\n");
            palabrasAux = new StringTokenizer(divisionRenglones[i], " ;,\n");
            texto = "";
            while (palabrasAux.hasMoreElements()) {
                texto = texto + palabrasAux.nextToken();
            }
            palabrasOper = new StringTokenizer(texto, "=+-*/%", true);
            palabra = palabras.nextToken().replaceAll("\n", "");
            if (palabra.equals("Double") || palabra.equals("String") || palabra.equals("Variable") || palabra.equals("Char")) {
                String tipo = palabra;
                banDuplicada = false;
                tablaIdenFilas = new String[5];
                tablaIdenFilas[0] = String.valueOf(i + 1);
                tablaIdenFilas[1] = objSem.conversionNum(palabra);
                tablaIdenFilas[2] = palabras.nextToken();
                if (!tablaIdenCol.isEmpty()) {
                    for (int j = 0; j < tablaIdenCol.size(); j++) {
                        if (tablaIdenCol.get(j)[2].equals(tablaIdenFilas[2])) {
                            mensaje = mensaje + "Duplicidad de variable " + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n";
                            jTProgramaSemantico.setText(mensaje);
                            banDuplicada = true;
                            banderaErrores = false;
                        }
                    }
                }
                if (!banDuplicada) {
                    tablaIdenCol.add(tablaIdenFilas);
                }
                while (palabras.hasMoreElements()) {
                    banDuplicada = false;
                    tablaIdenFilas = new String[5];
                    tablaIdenFilas[0] = String.valueOf(i + 1);
                    tablaIdenFilas[1] = objSem.conversionNum(tipo);
                    tablaIdenFilas[2] = palabras.nextToken();
                    if (!tablaIdenCol.isEmpty()) {
                        for (int j = 0; j < tablaIdenCol.size(); j++) {
                            if (tablaIdenCol.get(j)[2].equals(tablaIdenFilas[2])) {
                                mensaje = mensaje + "Duplicidad de variable " + tablaIdenFilas[2] + " en la linea " + tablaIdenFilas[0] + "\n";
                                jTProgramaSemantico.setText(mensaje);
                                banDuplicada = true;
                                banderaErrores = false;
                            }
                        }
                    }
                    if (!banDuplicada) {
                        if (!tablaIdenFilas[2].matches("\n")) {
                            tablaIdenCol.add(tablaIdenFilas);
                        }
                    }
                }
            } else {
                banderaVV = false;
                palabrasAsig = codigoFuente[i].getPalabras();
                if (palabrasAsig.length != 0 && palabrasAsig[0] == 50 && palabrasAsig[1] == 8) {
                    for (int j = 0; j < tablaIdenCol.size(); j++) {
                        if (tablaIdenCol.get(j)[2].equals(palabra)) {
                            banderaVE = true;
                            break;
                        }
                        banderaVE = false;
                    }
                    if (banderaVE) {
                        for (int j = 0; j < tablaIdenCol.size(); j++) {
                            if (tablaIdenCol.get(j)[2].equals(palabra)) {
                                palabras.nextToken();
                                palabras.nextToken();
                                palabrasOper.nextToken();
                                palabrasOper.nextToken();
                                palabra = palabrasOper.nextToken().replaceAll("\n", "");
                                if (!palabrasOper.hasMoreElements()) {
                                    String num = String.valueOf(objLexico.Etiquetar(palabra).numero);
                                    if ("50".equals(num)) {
                                        for (int n = 0; n < tablaIdenCol.size(); n++) {
                                            if (tablaIdenCol.get(n)[2].equals(palabra)) {
                                                if (objSem.operCompatibles(tablaIdenCol.get(j)[1], tablaIdenCol.get(n)[1])) {
                                                    if (tablaIdenCol.get(n)[3] == null && tablaIdenCol.get(n)[4] == null) {
                                                        break;
                                                    } else {
                                                        tablaIdenCol.get(j)[3] = tablaIdenCol.get(n)[3];
                                                        tablaIdenCol.get(j)[4] = tablaIdenCol.get(n)[4];
                                                        banderaVV = true;
                                                        break;
                                                    }
                                                } else {
                                                    mensaje = mensaje + "Asignación inválida en la linea " + String.valueOf(i + 1) + ", " + objSem.conversionString(tablaIdenCol.get(n)[4])
                                                            + " no se puede convertir a " + objSem.conversionString(tablaIdenCol.get(j)[1]) + "\n";
                                                    jTProgramaSemantico.setText(mensaje);
                                                    banderaErrores = false;
                                                }
                                                break;
                                            }
                                        }
                                        if (!banderaVV) {
                                            mensaje = mensaje + "Asignación de variable no declarada en la linea " + String.valueOf(i + 1) + "\n";
                                            jTProgramaSemantico.setText(mensaje);
                                            banderaErrores = false;
                                            break;
                                        }
                                    } else {
                                        if (!banderaVV) {
                                            if (objSem.operCompatibles(tablaIdenCol.get(j)[1], num)) {
                                                tablaIdenCol.get(j)[3] = palabra;
                                                tablaIdenCol.get(j)[4] = num;
                                                break;
                                            } else {
                                                mensaje = mensaje + "Asignación inválida en la linea " + String.valueOf(i + 1) + ", " + objSem.conversionString(num)
                                                        + " no se puede convertir a " + objSem.conversionString(tablaIdenCol.get(j)[1]) + "\n";
                                                jTProgramaSemantico.setText(mensaje);
                                                banderaErrores = false;
                                            }
                                        }
                                    }
                                } else {
                                    String operacion = "", num;
                                    while (palabrasOper.hasMoreElements()) {
                                        if (objLexico.Etiquetar(palabra).numero == 50) {
                                            for (int n = 0; n < tablaIdenCol.size(); n++) {
                                                if (tablaIdenCol.get(n)[2].equals(palabra)) {
                                                    operacion = operacion + palabra;
                                                    banderaVV = true;
                                                    palabra = palabrasOper.nextToken().replaceAll("\n", "");
                                                    break;
                                                }
                                            }
                                            if (!banderaVV) {
                                                mensaje = mensaje + "Asignación de variable no declarada en la linea " + String.valueOf(i + 1) + "\n";
                                                jTProgramaSemantico.setText(mensaje);
                                                banderaErrores = false;
                                            }
                                        } else {
                                            operacion = operacion + palabra;
                                            palabra = palabrasOper.nextToken().replaceAll("\n", "");
                                        }
                                    }
                                    if (objLexico.Etiquetar(palabra).numero == 50) {
                                        for (int n = 0; n < tablaIdenCol.size(); n++) {
                                            if (tablaIdenCol.get(n)[2].equals(palabra)) {
                                                operacion = operacion + palabra;
                                                banderaVV = true;
                                                break;
                                            }
                                        }
                                        if (!banderaVV) {
                                            mensaje = mensaje + "Asignación de variable no declarada en la linea " + String.valueOf(i + 1) + "\n";
                                            jTProgramaSemantico.setText(mensaje);
                                            operacion = operacion + "\"error\"";
                                            banderaErrores = false;
                                        }
                                    } else {
                                        operacion = operacion + palabra;
                                    }
                                    try {
                                        String res = objSem.calcular(operacion, jTabbedPane1, tablaIdenCol, tablaIdenCol.get(j)[2]);
                                        num = String.valueOf(objLexico.Etiquetar(res).numero);
                                        if (objSem.operCompatibles(tablaIdenCol.get(j)[1], num)) {
                                            tablaIdenCol.get(j)[3] = res;
                                            tablaIdenCol.get(j)[4] = num;
                                            break;
                                        } else {
                                            mensaje = mensaje + "Asignación inválida en la linea " + String.valueOf(i + 1) + ", " + objSem.conversionString(num)
                                                    + " no se puede convertir a " + objSem.conversionString(tablaIdenCol.get(j)[1]) + "\n";
                                            jTProgramaSemantico.setText(mensaje);
                                            banderaErrores = false;
                                        }
                                    } catch (Exception ex) {
                                        banderaErrores = false;
                                    }
                                    break;
                                }
                            }
                        }
                    } else {
                        mensaje = mensaje + "Variable " + palabra + " no declarada en la linea " + String.valueOf(i + 1) + "\n";
                        banderaErrores = false;
                        jTProgramaSemantico.setText(mensaje);
                    }
                }
            }
        }

        for (int i = 0; i < tablaIdenCol.size(); i++) {
            for (int j = 0; j < tablaIdenCol.get(i).length; j++) {
                System.out.print(tablaIdenCol.get(i)[j] + " ");
            }
            System.out.println("");
        }
        if (banderaErrores) {
            lbSem.setText("Semánticamente Correcto");
            jTProgramaSemantico.setText(mensaje);
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_lbSemanticoMouseClicked

    private void lbIntermedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIntermedioMouseClicked
        pnOptimizacion.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbIntermedioMouseClicked

    private void lbOptimizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbOptimizacionMouseClicked
        pnObjeto.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbOptimizacionMouseClicked

    private void lbCargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbCargarMouseClicked
        pnSintactico.setVisible(false);
        pnSemantico.setVisible(false);
        pnIntermedio.setVisible(false);
        pnOptimizacion.setVisible(false);
        pnObjeto.setVisible(false);
        lbLex.setText("Lexico:");
        lbSin.setText("Sintactico:");
        lbSem.setText("Semantico:");
        jTProgramaCompilado.setText("");
        jTProgramaSintactico.setText("");
        jTProgramaSemantico.setText("");
        // TODO add your handling code here:
        jTProgramaFuente.setText(ManejoArchivos.cargarArchivo());
    }//GEN-LAST:event_lbCargarMouseClicked

    private void lbGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGuardarMouseClicked
        try {
            ManejoArchivos.guardarArchivo(jTProgramaFuente.getText());
            // TODO add your handling code here:

        } catch (IOException ex) {
            Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Archivo Guardado con exito.");
    }//GEN-LAST:event_lbGuardarMouseClicked

    private void jTProgramaFuenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProgramaFuenteKeyTyped
        lbLexico.setText("Lexico:");
        lbSintactico.setText("Sintactico:");
        lbSemantico.setText("Semantico:");
    }//GEN-LAST:event_jTProgramaFuenteKeyTyped

    private void cambiaC(int l) {
        jTProgramaFuente.getLineCount();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTProgramaCompilado;
    private javax.swing.JTextArea jTProgramaFuente;
    private javax.swing.JTextArea jTProgramaSemantico;
    private javax.swing.JTextArea jTProgramaSintactico;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbCargar;
    private javax.swing.JLabel lbGuardar;
    private javax.swing.JLabel lbIntermedio;
    private javax.swing.JLabel lbLex;
    private javax.swing.JLabel lbLexico;
    private javax.swing.JLabel lbObjeto;
    private javax.swing.JLabel lbOptimizacion;
    private javax.swing.JLabel lbSem;
    private javax.swing.JLabel lbSemantico;
    private javax.swing.JLabel lbSin;
    private javax.swing.JLabel lbSintactico;
    private javax.swing.JPanel pnCarga1;
    private javax.swing.JPanel pnContenedor;
    private javax.swing.JPanel pnGuardar;
    private javax.swing.JPanel pnIntermedio;
    private javax.swing.JPanel pnLexico;
    private javax.swing.JPanel pnObjeto;
    private javax.swing.JPanel pnOptimizacion;
    private javax.swing.JPanel pnSemantico;
    private javax.swing.JPanel pnSintactico;
    // End of variables declaration//GEN-END:variables
}
